关于原型和原型链的整理：
参考（https://zhuanlan.zhihu.com/p/23090041）
原型链：
当访问一个对象的属性，恰巧这个属性是继承自他的父级时，此时编译器会通过_proto_属性
一层一层向上访问，直至访问到该属性为止，而整个过程中_proto_形成的链就叫做原型链。

原型对象：



在JS中，所有的对象都包含_proto_属性（也包含了函数），而_proto_本身是一个对象，而这个对象
指向了构造该对象的构造函数的原型对象（prototype）。
函数因为其本身特性和职责决定了它有时候要担任起“造对象”这么一个功能，也就是我们说的构造函数。

所以我们要捋清楚各自的职责（第一人称）：
构造函数，即使被创造者，也是创造者身份。
权利：我可以决定创造出来的对象出生那一刻的样貌和功能。
原型对象（prototype）：
主动创造。
嗯~我要开始创作了~先写个名字，我怕以后别人不认识我~
于是有了constructor指回构造函数。
我把我想创造的对象的样貌都写在这儿~
balabala~
继承对象（_proto_）：
被创造。
作为创造者（构造函数），一般都是我的_proto_都是指向了Function.prototype
毕竟是Function创造了我。

对象，被创造者身份。
权利：我是生不出来了，所以我要prototype也没卵用了，但是我把创作出来的属性我不喜欢
还是能改的。
继承对象（_proto_）：
被创造。
这里是创造者把我创作出的样貌，还有他的著作权。跟他创作时写的prototype是一模一样了。
_proto_是指向prototype对象的。

综上：对象是被创造者，所以只有_proto_，指向了被创造者书写的内容，也就是prototype对象。
而函数，身兼两职责，多的prototype属性，专门用来写自己创作灵感。







