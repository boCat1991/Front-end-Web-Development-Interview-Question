基础知识：
Xhtml和html和xml的区别：
1.中文名：
  xhtml： 可扩展超文本标记语言。
  html： 超文本标记语言。
  xml:  可扩张标记语言。

2. xhtml是基于xml语法规则下的产物，所以某种意义上来说，也是xml的子集。是一种过渡产物。
   xhtml的语法更为苛责，严谨，导致游览器在解析的时候出现纰漏就会停止解析。
   严格主要体现在：标签闭合，大小写的区分，包括传统ID属性也被置位name。
   个人唯一用过一次xml是在做微信公众平台的支付时候，在微信的支付文档中有提到，
   用户的信息，包括openID支付的money等等都传递到后台，当然后续还是放弃了这种做法，个人隐私的操作
   放在前端去实现，安全性是极差的。

2.session cookie
  session 在服务器端； cookie 在客户端（浏览器）；
  相关的关系:session 的运行依赖session ID，而这个是存在于本地的cookie当中，所以当用户手动关闭cookie功能，session
  的运行自然受阻了。
  应用场景:主要是在用户登录验证这块。
  其实二者的通信的中枢纽带就是session ID。

3.什么是闭包？闭包的作用？
  先说一个问题:当函数外围希望访问函数内部信息的时候（什么属性啊，函数啊，这啊那啊的）怎么做？
  由于作用域的限制，函数外部是不能直接访问内部信息的。
  怎么解决？
  我们通过在函数体内return出一个函数，这个函数再次return主体函数中所包含的信息就可以。
   function test(){
     let foo = {};
     foo.name = 'bobo';
     foo.age = '12';
     let fooOut = function(){
         return foo;
     }
     return fooOut;
 }
 console.log(test());       //函数
console.log(test()().name);  //bobo
如上：此时foo与fooOut形成了一个闭包;fooOut是访问test主体函数内部信息的唯一路径。
所以，用自己的话说，就是形成访问某些信息的唯一通道。
！！其实你写一个函数这就算创建了闭包了；
有引用就有释放，当你在不需要的时候时候通过手动挡 赋值null去释放就好了。
总结：
什么是闭包？
函数和函数内部所能访问的变量的总和，就叫做闭包。

创建一个闭包？
函数体内再创建一个函数，然后return出这个创建的函数。

为什么要这样操作？
闭包的目的就是创建隐藏变量，所以函数套函数只是为了造出一个局部变量，跟闭包无关。

闭包的作用？
也就是闭包的目的，创建隐藏变量，避免全局访问和修改。

关于闭包引用产生的内存回收问题如何解决？
首先各个游览器的引擎对内存的回收处理机制是不同的。以下为详细对比：
http://www.cnblogs.com/rubylouvre/p/3345294.html
举一个例子：比如return的函数中对主体函数的变量是否有访问，如果没有，
V8引擎下会对变量回收处理，但是IE引擎则是不处理。