1.promise语法
 1.首先promise是一个内置的构造函数。
 promise有三种状态：
 pending（进行中）、fulfilled（已成功）和rejected（已失败）

 promise对象的两个特点：
 1.对象的状态不会被外界更改。
 2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。

 基于promise语法对Ajax进行的封装处理：
 let Ajax = new Promise((resolve,reject) => {
    const handler = function() {
      if (this.readyState !== 4) {
        return;
      }
      if (this.status === 200) {
        resolve(this.response);
      } else {
        reject(new Error(this.statusText));
      }
    };
    const client = new XMLHttpRequest();
    client.open("GET", url);
    client.onreadystatechange = handler;
    client.responseType = "json";
    client.setRequestHeader("Accept", "application/json");
    client.send();
    return promise;
})
Ajax("/posts.json").then(function(json) {
  console.log('Contents: ' + json);
}, function(error) {
  console.error('出错了', error);
});

1.先new一个promise对象
2.promise的构造函数会接受一个函数作为参数
3.作为参数的函数又有两个参数分别是resolve函数和reject函数
4.当XMLHttpRequest的对象中的onreadystatechange事件被触发后
5.判断status的状态：
200时为访问成功，此时调用resolve函数，
将会把当前的promise对象的状态从pending置位fulfilled状态。
其他则执行，reject函数，
promise对象的状态从pending置位reject状态。
以上都是对promise对象的预处理。
当我们调用这个对象的时候，then直到对象从pending状态切换后才会执行。
then中有两个函数，第一个为回调成功，第二个为回调失败执行。

2.class语法
class的出现是为了让原型继承更加简洁。
传统的js类的实现：
//构造函数
function person(name){
  this.name = name;
}
//原型对象
person.prototype.sayName = function(){
  console.log(this.name);
}
//实例化
var personA = new person('A');
console.log(personA instanceof PersonType); // true

//class
class person{
  //等价于之前的构造函数
  constructor(name){
    this.name = name;
  }
  //等价于之前的原型对象
  sayName(){
    console.log(this.name);
  }
}
//实例化
var personA = new person('A');
console.log(personA instanceof PersonType); // true
class声明的类的prototype是只读属性。

实现继承：
传统JS：
function student(name){
  person.call(this,name); //继承person构造函数的方法
}
Square.prototype = Object.create(Rectangle.prototype, {
  constructor: {
    value: Square,
    enumerable: true,
    writable: true,
    configurable: true
  }
});  
or
Square.prototype = person.prototype; //实现原型对象的继承

class：
class student extends {
  constructor(name){
    // 通过super访问Rectangle的构造函数（其实就是constructor里面的那些）
    // 等价于上面例子中的 Rectangle.call(this, length, length);
    super(name);
  }
}

1.let 和 const  
  以{}为块级区域;

2.模板语法 
 `` 末班中加入变量 `你好${foo}`

3.函数默认参数
ES5: var num  = num || 200;	...存在问题！当num == 0的时候自动为false
     test(num = 200){
	}
完美解决

4.箭头函数
  arg => arg + 1; //自带return;

5.访问数据更简便（对象和数组都是）
    //ES5
    const foo = {name:'bobo',age:'21'};
    const fooII = ['bobo','21'];
    const userName = foo.name;
    const userAge = foo.age;
    //ES6
    const{name,age}  = foo;
    //数组
    const [nameII,ageII] = fooII;

6.import 和 export
